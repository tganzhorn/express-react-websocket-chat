{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","socket","useRef","useState","userName","setUserName","message","setMessage","online","setOnline","messages","setMessages","transportType","setTransportType","handleMessages","msg","handleConnect","handleDisconnect","handleTransportType","current","io","engine","transport","query","useEffect","SocketIOClient","on","onAny","removeAllListeners","onSubmit","event","preventDefault","emit","timestamp","Date","style","display","alignItems","gap","width","height","backgroundColor","borderRadius","type","value","onChange","target","placeholder","map","time","getHours","getMinutes","slice","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NAsFeA,EAnFH,WACV,IAAMC,EAASC,iBAAO,MADN,EAEgBC,mBAAS,IAFzB,mBAETC,EAFS,KAECC,EAFD,OAGcF,mBAAS,IAHvB,mBAGTG,EAHS,KAGAC,EAHA,OAIYJ,oBAAS,GAJrB,mBAITK,EAJS,KAIDC,EAJC,OAKgBN,mBAAS,IALzB,mBAKTO,EALS,KAKCC,EALD,OAM0BR,mBAAS,QANnC,mBAMTS,EANS,KAMMC,EANN,KAgBVC,EAAiB,SAACC,GACtBJ,GAAY,SAAAD,GAAQ,4BAAQA,GAAR,CAAkBK,QAGlCC,EAAgB,WACpBP,GAAU,IAGNQ,EAAmB,WACvBR,GAAU,IAGNS,EAAsB,WAC1BL,EAAiBZ,EAAOkB,QAAQC,GAAGC,OAAOC,UAAUC,MAAMD,YAyB5D,OAhBAE,qBAAU,WAWR,OAVAvB,EAAOkB,QAAUM,MAEjBxB,EAAOkB,QAAQO,GAAG,UAAWV,GAE7Bf,EAAOkB,QAAQO,GAAG,cAAc,kBAAMT,KAEtChB,EAAOkB,QAAQO,GAAG,eAAgBZ,GAElCb,EAAOkB,QAAQQ,MAAMT,GAEd,WACLjB,EAAOkB,QAAQS,wBAEhB,IAGD,qCACE,uBAAMC,SAxBW,SAAAC,GACnBA,EAAMC,iBACNxB,EAAW,IACXN,EAAOkB,QAAQa,KAAK,eAAgB,CAAC1B,UAASF,WAAU6B,UAAW,IAAIC,QAqBvCC,MAAO,CAACC,QAAS,OAAQC,WAAY,SAAUC,IAAK,GAAlF,UACE,sBAAMH,MAAO,CACXI,MAAO,GACPC,OAAQ,GACRC,gBAAiBjC,EAAS,QAAU,MACpC4B,QAAS,eACTM,aAAc,SAEhB,+BAAO9B,IACP,uBAAO+B,KAAK,OAAOC,MAAOxC,EAAUyC,SAzDb,SAAAf,GAC3BzB,GAAY,kBAAMyB,EAAMgB,OAAOF,UAwDyCG,YAAY,aAChF,uBAAOJ,KAAK,OAAOC,MAAOtC,EAASuC,SAtDb,SAAAf,GAC1BvB,GAAW,kBAAMuB,EAAMgB,OAAOF,UAqDwCG,YAAY,YAC9E,wBAAQJ,KAAK,SAAb,uBAGAjC,EAASsC,KAAI,SAAAjC,GAAQ,IACZX,EAAgCW,EAAhCX,SAAUE,EAAsBS,EAAtBT,QAAS2B,EAAalB,EAAbkB,UACpBgB,EAAO,IAAIf,KAAKD,GAEtB,OACE,gCAAiCgB,EAAKC,WAAtC,KAAoD,IAAMD,EAAKE,cAAcC,OAAO,GAApF,MAA2FhD,EAA3F,KAAuGE,IAA7F2B,EAAY7B,UClEnBiD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7455a607.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport SocketIOClient from 'socket.io-client';\n\nconst App = () => {\n  const socket = useRef(null);\n  const [userName, setUserName] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [online, setOnline] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [transportType, setTransportType] = useState(\"none\");\n\n  const handleUserNameChange = event => {\n    setUserName(() => event.target.value);\n  }\n\n  const handleMessageChange = event => {\n    setMessage(() => event.target.value);\n  }\n\n  const handleMessages = (msg) => {\n    setMessages(messages => [...messages, msg]);\n  }\n\n  const handleConnect = () => {\n    setOnline(true);\n  }\n\n  const handleDisconnect = () => {\n    setOnline(false);\n  }\n\n  const handleTransportType = () => {\n    setTransportType(socket.current.io.engine.transport.query.transport);\n  }\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    setMessage(\"\");\n    socket.current.emit('chat message', {message, userName, timestamp: new Date()});\n  }\n\n  useEffect(() => {\n    socket.current = SocketIOClient();\n\n    socket.current.on(\"connect\", handleConnect);\n\n    socket.current.on(\"disconnect\", () => handleDisconnect);\n\n    socket.current.on(\"chat message\", handleMessages);\n\n    socket.current.onAny(handleTransportType);\n\n    return () => {\n      socket.current.removeAllListeners();\n    }\n  }, []);\n\n  return (\n    <>\n      <form onSubmit={handleSubmit} style={{display: \"flex\", alignItems: \"center\", gap: 8}}>\n        <span style={{\n          width: 16,\n          height: 16,\n          backgroundColor: online ? \"green\" : \"red\",\n          display: \"inline-block\",\n          borderRadius: \"50%\"\n        }} />\n        <span>{transportType}</span>\n        <input type=\"text\" value={userName} onChange={handleUserNameChange} placeholder=\"Username\" />\n        <input type=\"text\" value={message} onChange={handleMessageChange} placeholder=\"Message\" />\n        <button type=\"submit\">Submit</button>\n      </form>\n      {\n        messages.map(msg => {\n          const {userName, message, timestamp} = msg;\n          const time = new Date(timestamp);\n\n          return (\n            <div key={timestamp + userName}>{time.getHours()}:{('0' + time.getMinutes()).slice(-2)} | {userName}: {message}</div>\n          )\n        })\n      }\n    </>\n  )\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}