{"ast":null,"code":"var _jsxFileName = \"/home/tobias/Documents/test-app/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport SocketIOClient from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const socket = useRef(null);\n  const [userName, setUserName] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [online, setOnline] = useState(false);\n  const [messages, setMessages] = useState([]);\n\n  const handleUserNameChange = event => {\n    setUserName(() => event.target.value);\n  };\n\n  const handleMessageChange = event => {\n    setMessage(() => event.target.value);\n  };\n\n  const handleMessages = msg => {\n    setMessages(messages => [...messages, msg]);\n  };\n\n  const handleConnect = () => {\n    setOnline(true);\n  };\n\n  const handleDisconnect = () => {\n    setOnline(false);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    socket.current.emit('chat message', {\n      message,\n      userName,\n      timestamp: new Date()\n    });\n  };\n\n  useEffect(() => {\n    socket.current = SocketIOClient();\n    socket.current.on(\"connect\", handleConnect);\n    socket.current.on(\"disconnect\", () => handleDisconnect);\n    socket.current.on(\"chat message\", handleMessages);\n    return () => {\n      socket.current.removeAllListeners();\n    };\n  }, []);\n\n  const handleSocket = () => {\n    socket.current.emit('chat message', {\n      message: \"Hi there!\"\n    });\n  };\n\n  const handleRegular = () => {\n    fetch(\"/api/world\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        message: \"Hi There!!xD\"\n      })\n    }).then(res => res.json()).then(console.log);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: userName,\n        onChange: handleUserNameChange,\n        placeholder: \"Username\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: message,\n        onChange: handleMessageChange,\n        placeholder: \"Message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), messages.map(msg => {\n      const {\n        userName,\n        message,\n        timestamp\n      } = msg;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [timestamp, \" | \", userName, \": \", message]\n      }, timestamp + userName, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, this);\n    })]\n  }, void 0, true);\n};\n\n_s(App, \"W8Z6MPMxuQ6al7wLUJVmG1RoOqU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/tobias/Documents/test-app/client/src/App.js"],"names":["React","useEffect","useRef","useState","SocketIOClient","App","socket","userName","setUserName","message","setMessage","online","setOnline","messages","setMessages","handleUserNameChange","event","target","value","handleMessageChange","handleMessages","msg","handleConnect","handleDisconnect","handleSubmit","preventDefault","current","emit","timestamp","Date","on","removeAllListeners","handleSocket","handleRegular","fetch","method","headers","body","JSON","stringify","then","res","json","console","log","map"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport SocketIOClient from 'socket.io-client';\n\nconst App = () => {\n  const socket = useRef(null);\n  const [userName, setUserName] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [online, setOnline] = useState(false);\n  const [messages, setMessages] = useState([]);\n\n  const handleUserNameChange = event => {\n    setUserName(() => event.target.value);\n  }\n\n  const handleMessageChange = event => {\n    setMessage(() => event.target.value);\n  }\n\n  const handleMessages = (msg) => {\n    setMessages(messages => [...messages, msg]);\n  }\n\n  const handleConnect = () => {\n    setOnline(true);\n  }\n\n  const handleDisconnect = () => {\n    setOnline(false);\n  }\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    socket.current.emit('chat message', {message, userName, timestamp: new Date()});\n  }\n\n  useEffect(() => {\n    socket.current = SocketIOClient();\n\n    socket.current.on(\"connect\", handleConnect);\n\n    socket.current.on(\"disconnect\", () => handleDisconnect);\n\n    socket.current.on(\"chat message\", handleMessages);\n\n    return () => {\n      socket.current.removeAllListeners();\n    }\n  }, []);\n\n  const handleSocket = () => {\n    socket.current.emit('chat message', {message: \"Hi there!\"})\n  }\n\n  const handleRegular = () => {\n    fetch(\"/api/world\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({message: \"Hi There!!xD\"})\n    }).then(res => res.json()).then(console.log);\n  }\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" value={userName} onChange={handleUserNameChange} placeholder=\"Username\" />\n        <input type=\"text\" value={message} onChange={handleMessageChange} placeholder=\"Message\" />\n        <button type=\"submit\"></button>\n      </form>\n      {\n        messages.map(msg => {\n          const {userName, message, timestamp} = msg;\n\n          return (\n            <div key={timestamp + userName}>{timestamp} | {userName}: {message}</div>\n          )\n        })\n      }\n    </>\n  )\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}