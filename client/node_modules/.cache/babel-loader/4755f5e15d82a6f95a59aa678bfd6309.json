{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/home/tobias/Documents/test-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"/home/tobias/Documents/test-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/home/tobias/Documents/test-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/tobias/Documents/test-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/home/tobias/Documents/test-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/home/tobias/Documents/test-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Adapter = void 0;\n\nvar events_1 = require(\"events\");\n\nvar Adapter = /*#__PURE__*/function (_events_1$EventEmitte) {\n  _inherits(Adapter, _events_1$EventEmitte);\n\n  var _super = _createSuper(Adapter);\n\n  /**\n   * In-memory adapter constructor.\n   *\n   * @param {Namespace} nsp\n   */\n  function Adapter(nsp) {\n    var _this;\n\n    _classCallCheck(this, Adapter);\n\n    _this = _super.call(this);\n    _this.nsp = nsp;\n    _this.rooms = new Map();\n    _this.sids = new Map();\n    _this.encoder = nsp.server.encoder;\n    return _this;\n  }\n  /**\n   * To be overridden\n   */\n\n\n  _createClass(Adapter, [{\n    key: \"init\",\n    value: function init() {}\n    /**\n     * To be overridden\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {}\n    /**\n     * Adds a socket to a list of room.\n     *\n     * @param {SocketId}  id      the socket id\n     * @param {Set<Room>} rooms   a set of rooms\n     * @public\n     */\n\n  }, {\n    key: \"addAll\",\n    value: function addAll(id, rooms) {\n      if (!this.sids.has(id)) {\n        this.sids.set(id, new Set());\n      }\n\n      var _iterator = _createForOfIteratorHelper(rooms),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var room = _step.value;\n          this.sids.get(id).add(room);\n\n          if (!this.rooms.has(room)) {\n            this.rooms.set(room, new Set());\n            this.emit(\"create-room\", room);\n          }\n\n          if (!this.rooms.get(room).has(id)) {\n            this.rooms.get(room).add(id);\n            this.emit(\"join-room\", room, id);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    /**\n     * Removes a socket from a room.\n     *\n     * @param {SocketId} id     the socket id\n     * @param {Room}     room   the room name\n     */\n\n  }, {\n    key: \"del\",\n    value: function del(id, room) {\n      if (this.sids.has(id)) {\n        this.sids.get(id).delete(room);\n      }\n\n      this._del(room, id);\n    }\n  }, {\n    key: \"_del\",\n    value: function _del(room, id) {\n      if (this.rooms.has(room)) {\n        var deleted = this.rooms.get(room).delete(id);\n\n        if (deleted) {\n          this.emit(\"leave-room\", room, id);\n        }\n\n        if (this.rooms.get(room).size === 0) {\n          this.rooms.delete(room);\n          this.emit(\"delete-room\", room);\n        }\n      }\n    }\n    /**\n     * Removes a socket from all rooms it's joined.\n     *\n     * @param {SocketId} id   the socket id\n     */\n\n  }, {\n    key: \"delAll\",\n    value: function delAll(id) {\n      if (!this.sids.has(id)) {\n        return;\n      }\n\n      var _iterator2 = _createForOfIteratorHelper(this.sids.get(id)),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var room = _step2.value;\n\n          this._del(room, id);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      this.sids.delete(id);\n    }\n    /**\n     * Broadcasts a packet.\n     *\n     * Options:\n     *  - `flags` {Object} flags for this packet\n     *  - `except` {Array} sids that should be excluded\n     *  - `rooms` {Array} list of rooms to broadcast to\n     *\n     * @param {Object} packet   the packet object\n     * @param {Object} opts     the options\n     * @public\n     */\n\n  }, {\n    key: \"broadcast\",\n    value: function broadcast(packet, opts) {\n      var flags = opts.flags || {};\n      var packetOpts = {\n        preEncoded: true,\n        volatile: flags.volatile,\n        compress: flags.compress\n      };\n      packet.nsp = this.nsp.name;\n      var encodedPackets = this.encoder.encode(packet);\n      this.apply(opts, function (socket) {\n        socket.packet(encodedPackets, packetOpts);\n      });\n    }\n    /**\n     * Gets a list of sockets by sid.\n     *\n     * @param {Set<Room>} rooms   the explicit set of rooms to check.\n     */\n\n  }, {\n    key: \"sockets\",\n    value: function sockets(rooms) {\n      var sids = new Set();\n      this.apply({\n        rooms: rooms\n      }, function (socket) {\n        sids.add(socket.id);\n      });\n      return Promise.resolve(sids);\n    }\n    /**\n     * Gets the list of rooms a given socket has joined.\n     *\n     * @param {SocketId} id   the socket id\n     */\n\n  }, {\n    key: \"socketRooms\",\n    value: function socketRooms(id) {\n      return this.sids.get(id);\n    }\n    /**\n     * Returns the matching socket instances\n     *\n     * @param opts - the filters to apply\n     */\n\n  }, {\n    key: \"fetchSockets\",\n    value: function fetchSockets(opts) {\n      var sockets = [];\n      this.apply(opts, function (socket) {\n        sockets.push(socket);\n      });\n      return Promise.resolve(sockets);\n    }\n    /**\n     * Makes the matching socket instances join the specified rooms\n     *\n     * @param opts - the filters to apply\n     * @param rooms - the rooms to join\n     */\n\n  }, {\n    key: \"addSockets\",\n    value: function addSockets(opts, rooms) {\n      this.apply(opts, function (socket) {\n        socket.join(rooms);\n      });\n    }\n    /**\n     * Makes the matching socket instances leave the specified rooms\n     *\n     * @param opts - the filters to apply\n     * @param rooms - the rooms to leave\n     */\n\n  }, {\n    key: \"delSockets\",\n    value: function delSockets(opts, rooms) {\n      this.apply(opts, function (socket) {\n        rooms.forEach(function (room) {\n          return socket.leave(room);\n        });\n      });\n    }\n    /**\n     * Makes the matching socket instances disconnect\n     *\n     * @param opts - the filters to apply\n     * @param close - whether to close the underlying connection\n     */\n\n  }, {\n    key: \"disconnectSockets\",\n    value: function disconnectSockets(opts, close) {\n      this.apply(opts, function (socket) {\n        socket.disconnect(close);\n      });\n    }\n  }, {\n    key: \"apply\",\n    value: function apply(opts, callback) {\n      var rooms = opts.rooms;\n      var except = this.computeExceptSids(opts.except);\n\n      if (rooms.size) {\n        var ids = new Set();\n\n        var _iterator3 = _createForOfIteratorHelper(rooms),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var room = _step3.value;\n            if (!this.rooms.has(room)) continue;\n\n            var _iterator4 = _createForOfIteratorHelper(this.rooms.get(room)),\n                _step4;\n\n            try {\n              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                var id = _step4.value;\n                if (ids.has(id) || except.has(id)) continue;\n                var socket = this.nsp.sockets.get(id);\n\n                if (socket) {\n                  callback(socket);\n                  ids.add(id);\n                }\n              }\n            } catch (err) {\n              _iterator4.e(err);\n            } finally {\n              _iterator4.f();\n            }\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      } else {\n        var _iterator5 = _createForOfIteratorHelper(this.sids),\n            _step5;\n\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var _step5$value = _slicedToArray(_step5.value, 1),\n                _id = _step5$value[0];\n\n            if (except.has(_id)) continue;\n\n            var _socket = this.nsp.sockets.get(_id);\n\n            if (_socket) callback(_socket);\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      }\n    }\n  }, {\n    key: \"computeExceptSids\",\n    value: function computeExceptSids(exceptRooms) {\n      var exceptSids = new Set();\n\n      if (exceptRooms && exceptRooms.size > 0) {\n        var _iterator6 = _createForOfIteratorHelper(exceptRooms),\n            _step6;\n\n        try {\n          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n            var room = _step6.value;\n\n            if (this.rooms.has(room)) {\n              this.rooms.get(room).forEach(function (sid) {\n                return exceptSids.add(sid);\n              });\n            }\n          }\n        } catch (err) {\n          _iterator6.e(err);\n        } finally {\n          _iterator6.f();\n        }\n      }\n\n      return exceptSids;\n    }\n  }]);\n\n  return Adapter;\n}(events_1.EventEmitter);\n\nexports.Adapter = Adapter;","map":{"version":3,"sources":["/home/tobias/Documents/test-app/client/node_modules/socket.io-adapter/dist/index.js"],"names":["Object","defineProperty","exports","value","Adapter","events_1","require","nsp","rooms","Map","sids","encoder","server","id","has","set","Set","room","get","add","emit","delete","_del","deleted","size","packet","opts","flags","packetOpts","preEncoded","volatile","compress","name","encodedPackets","encode","apply","socket","Promise","resolve","sockets","push","join","forEach","leave","close","disconnect","callback","except","computeExceptSids","ids","exceptRooms","exceptSids","sid","EventEmitter"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Adapter = void 0;\nconst events_1 = require(\"events\");\nclass Adapter extends events_1.EventEmitter {\n    /**\n     * In-memory adapter constructor.\n     *\n     * @param {Namespace} nsp\n     */\n    constructor(nsp) {\n        super();\n        this.nsp = nsp;\n        this.rooms = new Map();\n        this.sids = new Map();\n        this.encoder = nsp.server.encoder;\n    }\n    /**\n     * To be overridden\n     */\n    init() { }\n    /**\n     * To be overridden\n     */\n    close() { }\n    /**\n     * Adds a socket to a list of room.\n     *\n     * @param {SocketId}  id      the socket id\n     * @param {Set<Room>} rooms   a set of rooms\n     * @public\n     */\n    addAll(id, rooms) {\n        if (!this.sids.has(id)) {\n            this.sids.set(id, new Set());\n        }\n        for (const room of rooms) {\n            this.sids.get(id).add(room);\n            if (!this.rooms.has(room)) {\n                this.rooms.set(room, new Set());\n                this.emit(\"create-room\", room);\n            }\n            if (!this.rooms.get(room).has(id)) {\n                this.rooms.get(room).add(id);\n                this.emit(\"join-room\", room, id);\n            }\n        }\n    }\n    /**\n     * Removes a socket from a room.\n     *\n     * @param {SocketId} id     the socket id\n     * @param {Room}     room   the room name\n     */\n    del(id, room) {\n        if (this.sids.has(id)) {\n            this.sids.get(id).delete(room);\n        }\n        this._del(room, id);\n    }\n    _del(room, id) {\n        if (this.rooms.has(room)) {\n            const deleted = this.rooms.get(room).delete(id);\n            if (deleted) {\n                this.emit(\"leave-room\", room, id);\n            }\n            if (this.rooms.get(room).size === 0) {\n                this.rooms.delete(room);\n                this.emit(\"delete-room\", room);\n            }\n        }\n    }\n    /**\n     * Removes a socket from all rooms it's joined.\n     *\n     * @param {SocketId} id   the socket id\n     */\n    delAll(id) {\n        if (!this.sids.has(id)) {\n            return;\n        }\n        for (const room of this.sids.get(id)) {\n            this._del(room, id);\n        }\n        this.sids.delete(id);\n    }\n    /**\n     * Broadcasts a packet.\n     *\n     * Options:\n     *  - `flags` {Object} flags for this packet\n     *  - `except` {Array} sids that should be excluded\n     *  - `rooms` {Array} list of rooms to broadcast to\n     *\n     * @param {Object} packet   the packet object\n     * @param {Object} opts     the options\n     * @public\n     */\n    broadcast(packet, opts) {\n        const flags = opts.flags || {};\n        const packetOpts = {\n            preEncoded: true,\n            volatile: flags.volatile,\n            compress: flags.compress\n        };\n        packet.nsp = this.nsp.name;\n        const encodedPackets = this.encoder.encode(packet);\n        this.apply(opts, socket => {\n            socket.packet(encodedPackets, packetOpts);\n        });\n    }\n    /**\n     * Gets a list of sockets by sid.\n     *\n     * @param {Set<Room>} rooms   the explicit set of rooms to check.\n     */\n    sockets(rooms) {\n        const sids = new Set();\n        this.apply({ rooms }, socket => {\n            sids.add(socket.id);\n        });\n        return Promise.resolve(sids);\n    }\n    /**\n     * Gets the list of rooms a given socket has joined.\n     *\n     * @param {SocketId} id   the socket id\n     */\n    socketRooms(id) {\n        return this.sids.get(id);\n    }\n    /**\n     * Returns the matching socket instances\n     *\n     * @param opts - the filters to apply\n     */\n    fetchSockets(opts) {\n        const sockets = [];\n        this.apply(opts, socket => {\n            sockets.push(socket);\n        });\n        return Promise.resolve(sockets);\n    }\n    /**\n     * Makes the matching socket instances join the specified rooms\n     *\n     * @param opts - the filters to apply\n     * @param rooms - the rooms to join\n     */\n    addSockets(opts, rooms) {\n        this.apply(opts, socket => {\n            socket.join(rooms);\n        });\n    }\n    /**\n     * Makes the matching socket instances leave the specified rooms\n     *\n     * @param opts - the filters to apply\n     * @param rooms - the rooms to leave\n     */\n    delSockets(opts, rooms) {\n        this.apply(opts, socket => {\n            rooms.forEach(room => socket.leave(room));\n        });\n    }\n    /**\n     * Makes the matching socket instances disconnect\n     *\n     * @param opts - the filters to apply\n     * @param close - whether to close the underlying connection\n     */\n    disconnectSockets(opts, close) {\n        this.apply(opts, socket => {\n            socket.disconnect(close);\n        });\n    }\n    apply(opts, callback) {\n        const rooms = opts.rooms;\n        const except = this.computeExceptSids(opts.except);\n        if (rooms.size) {\n            const ids = new Set();\n            for (const room of rooms) {\n                if (!this.rooms.has(room))\n                    continue;\n                for (const id of this.rooms.get(room)) {\n                    if (ids.has(id) || except.has(id))\n                        continue;\n                    const socket = this.nsp.sockets.get(id);\n                    if (socket) {\n                        callback(socket);\n                        ids.add(id);\n                    }\n                }\n            }\n        }\n        else {\n            for (const [id] of this.sids) {\n                if (except.has(id))\n                    continue;\n                const socket = this.nsp.sockets.get(id);\n                if (socket)\n                    callback(socket);\n            }\n        }\n    }\n    computeExceptSids(exceptRooms) {\n        const exceptSids = new Set();\n        if (exceptRooms && exceptRooms.size > 0) {\n            for (const room of exceptRooms) {\n                if (this.rooms.has(room)) {\n                    this.rooms.get(room).forEach(sid => exceptSids.add(sid));\n                }\n            }\n        }\n        return exceptSids;\n    }\n}\nexports.Adapter = Adapter;\n"]},"metadata":{},"sourceType":"script"}